<?php

/**
 * sfGuardUser
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    warsteiner
 * @subpackage model
 * @author     Diego Damico <songecko@gmail.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class sfGuardUser extends PluginsfGuardUser
{
	public function publishPost($text)
	{
		$user = sfContext::getInstance()->getUser();
		
		$access_token = $user->getAttribute('access_token');
		
		if (empty($access_token) || empty($access_token['oauth_token']) || empty($access_token['oauth_token_secret'])) 
		{
			return;
		}
		
		/* Create a TwitterOauth object with consumer/user tokens. */
		$connection = new TwitterOAuth(sfConfig::get('app_twitter_consumer_key'), sfConfig::get('app_twitter_consumer_secret'), $access_token['oauth_token'], $access_token['oauth_token_secret']);
		
		/* If method is set change API call made. Test is called by default. */
		$credentials = $connection->get('account/verify_credentials');
		
		if($credentials)
		{
			return $connection->post('statuses/update', array('status' => $text));
		}
	}
	
	public function publishPostWithMedia($text, $media)
	{
		$user = sfContext::getInstance()->getUser();
	
		$access_token = $user->getAttribute('access_token');
	
		if (empty($access_token) || empty($access_token['oauth_token']) || empty($access_token['oauth_token_secret']))
		{
			return;
		}
	
		/* Create a TwitterOauth object with consumer/user tokens. */
		$connection = new TwitterOAuth(sfConfig::get('app_twitter_consumer_key'), sfConfig::get('app_twitter_consumer_secret'), $access_token['oauth_token'], $access_token['oauth_token_secret']);
	
		/* If method is set change API call made. Test is called by default. */
		$credentials = $connection->get('account/verify_credentials');
	
		if($credentials)
		{
			$params = array('media[]' => '@'.$media, 'status' => $text);
			return $connection->upload('statuses/update_with_media', $params);
		}
	}
	
	/**
	 * @return String
	 */
	public function getSocialName()
	{
		return ($this->getUsername())?'@'.$this->getUsername():$this->Profile->getFirstName();
	}
	
	/**
	 * @return String
	 */
	public function getSocialPicture()
	{
		if($this->Profile && $this->Profile->getProfileImage())
		{
			return $this->Profile->getProfileImage();
		}/*else
		{
			return ($this->getUsername())?"http://api.twitter.com/1/users/profile_image/".$this->getUsername().".json?size=bigger":image_path('user_default.jpg');
		}*/
		
		return '';
	}
		
	public function getRankingPosition()
	{
		return sfGuardUserProfileTable::getInstance()->getUserRankingPosition($this->getId());
	}
	
	public function isFollowingUser($twitterUserId)
	{
		$connection = new TwitterOAuth(
				sfConfig::get('app_twitter_consumer_key'),
				sfConfig::get('app_twitter_consumer_secret'),
				sfConfig::get('app_twitter_oauth_token'),
				sfConfig::get('app_twitter_oauth_token_secret'
		));
		
		$followers =  $connection->get('friends/ids', array('screen_name' => $this->getUsername()));

		if(isset($followers->ids))
		{
			$followersIds = $followers->ids;
			foreach($followersIds as $followerId)
			{
				if($followerId == $twitterUserId)
					return true;
			}
		}
					
		return false;
	}
	
	public function getTweetId()
	{
		foreach ($this->Tweets as $tweet)
		{
			return $tweet->getTwitterGuid();
		}
		
		return null;
	}
}